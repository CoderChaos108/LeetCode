class Solution {
    int n;
    int[] parent,rank;
    boolean[] seen;
    int[][] a;

    public int getParent(int node){
        if(parent[node]==node)
            return node;
        parent[node]=getParent(parent[node]);
        return parent[node];
    }

    public void dfs(int node){
        if(seen[node])
            return;
        seen[node]=true;
        int par1=getParent(node);
        for(int i=0;i<n;i++){
            if(a[node][i]==1&&!seen[i]){
                int par2=getParent(i);
                if(par1!=par2){
                    if(rank[par1]>rank[par2])
                        parent[par2]=par1;
                    else if(rank[par2]>rank[par1])
                        parent[par1]=par2;
                    else{
                        rank[par1]++;
                        parent[par2]=par1;
                    }
                }
                dfs(i);
            }
        }
    }

    public int minMalwareSpread(int[][] graph,int[] initial){
        n=graph.length;
        a=graph;
        seen=new boolean[n];
        parent=new int[n];
        rank=new int[n];
        for(int i=0;i<n;i++)
            parent[i]=i;
        for(int i=0;i<n;i++)
            dfs(i);
        Arrays.sort(initial);
        int bestNode=initial[0];
        int maxSaved=-1;
        for(int node:initial){
            int[] size=new int[n];
            for(int i=0;i<n;i++){
                int par=getParent(i);
                size[par]++;
            }
            boolean[] seenComp=new boolean[n];
            int infected=0;
            for(int virus:initial){
                if(virus==node)
                    continue;
                int par=getParent(virus);
                if(!seenComp[par]){
                    seenComp[par]=true;
                    infected+=size[par];
                }
            }
            int saved=n-infected;
            if(saved>maxSaved){
                maxSaved=saved;
                bestNode=node;
            }
        }
        return bestNode;
    }
}
